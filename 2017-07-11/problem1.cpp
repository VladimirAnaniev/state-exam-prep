#include <iostream>

/**
 * –ì–æ—Ä—Å–∫–∏ —Ç–µ—Ä–µ–Ω –µ–ø—Ä–µ–¥—Å—Ç–∞–≤–µ–Ω —Å –ø–æ–º–æ—â—Ç–∞ –Ω–∞ –º—Ä–µ–∂–∞ –∏–ª–∏ –¥–≤—É–º–µ—Ä–µ–Ω –º–∞—Å–∏–≤ —Åùëöxùëõ(ùëö,ùëõ‚àà[0;100]) –æ–±–ª–∞—Å—Ç–∏ (–µ–ª–µ–º–µ–Ω—Ç–∏).
 *
 * –ï–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –¥–≤—É–º–µ—Ä–Ω–∏—è –º–∞—Å–∏–≤ —Å–∞ —Å–∏–º–≤–æ–ª–∏, –∫–æ–∏—Ç–æ –∏–º–∞—Ç —Å–ª–µ–¥–Ω–æ—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ:
 *   R‚Äì—Ä–µ–∫–∞;
 *   S‚Äì—Å–∫–∞–ª–∞;
 *   —Ü–∏—Ñ—Ä–∏ –æ—Ç 1 –¥–æ 4, –∫–æ–∏—Ç–æ –æ–∑–Ω–∞—á–∞–≤–∞—Ç –≥—ä—Å—Ç–æ—Ç–∞ –Ω–∞ –≥–æ—Ä–∞—Ç–∞.
 *
 * –¢–µ—Ä–µ–Ω—ä—Ç —Å–µ –ø—Ä–æ–º–µ–Ω—è –Ω–∞ –≤—Å–µ–∫–∏ 10 –≥–æ–¥–∏–Ω–∏.
 * –†–µ–∫–∞—Ç–∞ –∏ —Å–∫–∞–ª–∏—Ç–µ –æ—Å—Ç–∞–≤–∞—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–∏, –¥–æ–∫–∞—Ç–æ –≥—ä—Å—Ç–æ—Ç–∞—Ç–∞ –Ω–∞ –≥–æ—Ä—Å–∫–∏—Ç–µ –ø–ª–æ—â–∏ —Å–µ –ø—Ä–æ–º–µ–Ω—è –ø–æ —Å–ª–µ–¥–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞:
 *   1 –ø—Ä–µ–º–∏–Ω–∞–≤–∞ –≤ 2, 2 –≤ 3, a 3 –≤ 4.
 *   4 –ø—Ä–µ–º–∏–Ω–∞–≤–∞ –≤ 3, –∞–∫–æ –≤ —Å—ä—Å–µ–¥—Å—Ç–≤–æ –∏–º–∞ –ø–æ–Ω–µ 3 –æ–±–ª–∞—Å—Ç–∏ —Å –≥—ä—Å—Ç–æ—Ç–∞ 4, –≤ –ø—Ä–æ—Ç–∏–≤–µ–Ω —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∞ 4.
 *
 * –°—ä—Å–µ–¥–Ω–∏ –Ω–∞ –¥–∞–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç (–µ–ª–µ–º–µ–Ω—Ç) –æ—Ç –º–∞—Å–∏–≤–∞ —Å–∞ —Ç–µ–∑–∏ –æ–±–ª–∞—Å—Ç–∏, –∏–Ω–¥–µ–∫—Å–∏—Ç–µ –Ω–∞ –∫–æ–∏—Ç–æ —Å–µ —Ä–∞–∑–ª–∏—á–∞–≤–∞—Ç –Ω–∞–π-–º–Ω–æ–≥–æ —Å 1
 * —Ç.–µ. –≤—Å—è–∫–∞ –æ–±–ª–∞—Å—Ç –∏–º–∞ –Ω–∞–π-–º–Ω–æ–≥–æ 8 —Å—ä—Å–µ–¥–Ω–∏ –æ–±–ª–∞—Å—Ç–∏.
 *
 * –ù–∞–ø–∏—à–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –ø–æ –ø–æ–¥–∞–¥–µ–Ω —Ç–µ—Ä–µ–Ω –Ω–∞–º–∏—Ä–∞ –≤–∏–¥–∞ –º—É —Å–ª–µ–¥ 100 –≥–æ–¥–∏–Ω–∏.
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–∞–π—Ç–µ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –≤ –∫—Ä–∞—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∞.
 *
 * –ü—Ä–∏–º–µ—Ä–µ–Ω –≤–∏–¥ –Ω–∞ —Ç–µ—Ä–µ–Ω:
 *   R R 1 1 2 2
 *   1 R R R 1 2
 *   S 1 R R 2 3
 *   4 4 S S R R
 */

void print(char** field, int rows, int cols) {
    for (int r = 0; r < rows; r++) {
        for (int c = 0; c < cols; c++) {
            std::cout << field[r][c] << ' ';
        }
        std::cout << '\n';
    }
    std::cout << '\n';
}

bool hasAtLeast3Neighbours(char **field, int rows, int cols, int r, int c) {
    int count = 0;

    int rMin = r == 0 ? r : r - 1;
    int rMax = r == rows - 1 ? r : r + 1;
    int cMin = c == 0 ? c : c - 1;
    int cMax = c == cols - 1 ? c : c + 1;

    for (int i = rMin; i <= rMax; i++) {
        for (int j = cMin; j <= cMax; j++) {
            if (i == r && j == c) {
                continue;
            }

            count += (int) (field[i][j] == '4');
        }
    }

    return count >= 3;
}

char **after10Years(char **field, int rows, int cols) {
    char** after = new char*[rows];

    for (int r = 0; r < rows; r++) {
        after[r] = new char[cols];
        for (int c = 0; c < cols; c++) {
            char value = field[r][c];

            if (value >= '1' && value <= '3') {
                after[r][c] = (char) (value + 1);
            } else if (value == '4' && hasAtLeast3Neighbours(field, rows, cols, r, c)) {
                after[r][c] = '3';
            } else {
                after[r][c] = value;
            }
        }
    }

    return after;
}

char** add100Years(char **field, int rows, int cols) {
    for (int i = 0; i < 10; i++) {
        field = after10Years(field, rows, cols);
//        print(field, rows, cols);
    }

    return field;
}

int mainn() {

    char **field = new char *[4]{
            new char[6]{'R', 'R', '1', '1', '2', '2'},
            new char[6]{'1', 'R', 'R', 'R', '1', '2'},
            new char[6]{'S', '1', 'R', 'R', '2', '3'},
            new char[6]{'4', '4', 'S', 'S', 'R', 'R'}
    };

    field = add100Years(field, 4, 6);

    print(field, 4, 6);

    return 0;
}