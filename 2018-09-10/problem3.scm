; Даден е списък от списъци от числа ll и числова функция f. 

; Числото xнаричаме “корен” на f, ако f(x) = 0. Да се попълнят по подходящ начин празните полета по-долу, 
; така че функцията sumMaxRoots да намира сумата на корените на f в този списък от ll, в който f има най-много корени. 
; Ако има няколко такива списъка, функцията да връща сумата на корените в първия по ред списък. 
; Ако функцията няма корен сред числата в списъците на ll, функцията да връща 0.

; Упътване: можете да използвате наготово функциите apply, filter, foldr, length, map, max, maximum, 
; както и всички стандартни функции в R5RS за Scheme и Prelude за Haskell.


(define (selectList l1 l2)
    (if (>= (length l1) (length l2)) l1 l2))

(define (sumMaxRoots f ll)
    (apply +
        (foldr selectList '()
            (map (lambda (l)
                (filter (lambda (x) (= (f x) 0)) l)) ll))))

(sumMaxRoots (lambda (x) (-(* x x x) x)) '((1 2 3) (-1 0 5) (1 4 -1))) ; -1
