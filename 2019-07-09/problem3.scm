; Големият онлайн магазин Siberia търси начин да увеличи продажбите като препоръчва на клиентите си подходящи продукти. 
; За целта изследователският екип на Siberia експериментира с различни реализации на функция bestFit, 
; която приема като параметър код на продукт a и връща код на друг продукт b, който клиентите на магазина най-вероятно биха си купили заедно с a. 

; Задачата пред разработчиците на Siberia е да реализират функция recommended, 
; която получава като параметри потребителска кошница basket(списък от целочислени кодове на продукти), 
; функция bestFit и списък от продуктите на магазина products(списък от наредени двойки от уникален код на продукт и цена —неотрицателно число).

; Да се попълнят по подходящ начин празните полета по-долу така, че функцията recommended 
; да връща списък от кодовете на всички възможни препоръчани продукти. 

; Допуска се в резултата някои кодове да се срещат повече от веднъж. 
; Препоръчан продукт е такъв, който:
; - все още не е в basket, но се получава като резултат от прилагането на функцията bestFit над някой от продуктите, които вече са в basket;
; - има цена, която не надвишава общата цена на потребителската кошница,дефинирана като сумата от цените на продуктите в basket.

; Помощните дефиниции findPrice и basketCost намират съответно цената на даден продукт product в списъка products и цената на потребителската кошница. 

; Да се приеме, че basket съдържа само кодове на продукти в products и bestFit също връща само такива кодове.

; Упътване: могат да се използват наготово функциите apply, assoc, elem, filter, foldr, lookup, map, member, sum и
; стандартните  функции  в  R5RS  за  Scheme  и  в  Prelude  за  Haskell.

(define (recommended basket bestFit products)
    (define (findPrice product)
        (map cdr (filter (lambda (pair) (= (car pair) product) products))))
    (define basketCost 
        (apply + (map findPrice basket)))
    (filter 
        (lambda (product) (<= (findPrice product) basketCost))
        (map bestFit basket)))
